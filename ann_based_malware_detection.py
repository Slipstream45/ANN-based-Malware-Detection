# -*- coding: utf-8 -*-
"""ANN based Malware Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v3P8UBdGRvKDbKC7ncXUoNsE5iau37kb
"""

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download saurabhshahane/classification-of-malwares
!unzip classification-of-malwares.zip

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np


df = pd.read_csv("ClaMP_Integrated-5184.csv")

corr = df.corr().stack().reset_index(name="correlation")
g = sns.relplot(
    data=corr,
    x="level_0", y="level_1", hue="correlation", size="correlation",
    palette="vlag", hue_norm=(-1, 1), edgecolor=".7",
    height=10, sizes=(50, 250), size_norm=(-.2, .8))
g.set(xlabel="", ylabel="", aspect="equal")
g.despine(left=True, bottom=True)
g.ax.margins(.02)
for label in g.ax.get_xticklabels():
    label.set_rotation(90)
for artist in g.legend.legendHandles:
    artist.set_edgecolor(".7")

!pip install dabl

import dabl
dabl.plot(df,'class')

df.head()

df=df.drop(['e_cblp','e_cp','e_cparhdr','e_maxalloc','e_sp','e_lfanew'],axis=1)

df.fillna(0, inplace=True)

df=df.drop(['NumberOfSections','CreationYear'],axis=1)

from sklearn.preprocessing import LabelEncoder

df.head()

le =  LabelEncoder()
for i in df:
    if df[i].dtype=='object':
        df[i] = le.fit_transform(df[i])
    else:
        continue

X = df.drop(['class'],axis=1)
y = df['class']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y,test_size = 0.2, random_state = 0, stratify = y)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

X_train

X_test

y_train

y_test

from keras.models import Sequential
from keras.layers import Dense

model = Sequential()
model.add(Dense(X.shape[1], activation='relu', input_dim = X.shape[1]))
model.add(Dense(64, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(256, activation='relu'))
model.add(Dense(1, activation = 'sigmoid'))

X.shape[1]

model.compile(optimizer='adam', loss = 'binary_crossentropy', metrics=['accuracy'])

model.fit(X_train, y_train.to_numpy(), batch_size = 10, epochs = 100, verbose = 2)

y_pred = model.predict(X_test)

y_pred

p_pred = model.predict(X_test)
p_pred = p_pred.flatten()
print(p_pred.round(2))

y_pred = np.where(p_pred > 0.5, 1, 0)
print(y_pred)

model.evaluate(X_test, y_test.to_numpy())

from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
cm = confusion_matrix(y_test, y_pred)

import seaborn as sns
p = sns.heatmap(pd.DataFrame(cm), annot=True, cmap="YlGnBu" ,fmt='g')
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')

print(accuracy_score(y_test, y_pred)*100)

print(classification_report(y_test, y_pred))